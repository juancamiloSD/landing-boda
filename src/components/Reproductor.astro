---
// src/components/ReproductorMusica.astro

// Opcional: puedes pasar la ruta de la canción como una prop para hacerlo más reutilizable
import { Icon } from 'astro-icon/components'; // 1. Importa el componente Icon

interface Props {
  songSrc?: string;
}
const { songSrc = '/cancion.mp3' } = Astro.props;
---

<div id="music-player-container" class="w-full max-w-sm mx-auto flex flex-col items-center gap-4 py-8">
    <div id="player-controls" class="flex items-center gap-4 bg-white/20 backdrop-blur-md border border-white/40 rounded-full p-2 shadow-lg w-full">
        
        <button id="play-pause-button" class="flex-shrink-0 w-12 h-12 bg-gold rounded-full flex items-center justify-center text-white transition-transform hover:scale-110">
            <Icon name="bi:play-fill" id="play-icon" class="text-3xl" />
            <Icon name="bi:pause-fill" id="pause-icon" class="text-3xl hidden" />
        </button>
        
        <div class="flex-grow flex flex-row !gap-3 items-center justify-center px-2">
            <div id="current-time" class="text-xs text-gray-600">0:00</div>
            <input type="range" id="seek-slider" class="w-full h-1" value="0" min="0" max="100">
            <div id="duration-time" class="text-xs text-gray-600">0:00</div>
        </div>
    </div>
</div>

<audio id="audio-player" src={songSrc}></audio>


<!-- 4. El SCRIPT que le da vida al reproductor -->
<script is:inline>
    const audioPlayer = document.getElementById('audio-player');
    const playPauseButton = document.getElementById('play-pause-button');
    const playIcon = document.getElementById('play-icon');
    const pauseIcon = document.getElementById('pause-icon');
    const seekSlider = document.getElementById('seek-slider');
    const currentTimeEl = document.getElementById('current-time');
    const durationTimeEl = document.getElementById('duration-time');

    // --- Autoplay con Interacción del Usuario (Política de Navegadores) ---
    // La música no sonará hasta que el usuario haga clic en CUALQUIER PARTE.
    function startMusicOnFirstInteraction() {
        if (audioPlayer.paused) {
            audioPlayer.play().catch(error => {
                console.log("Autoplay fue bloqueado. El usuario debe interactuar con el reproductor.");
            });
        }
        document.body.removeEventListener('click', startMusicOnFirstInteraction);
        document.body.removeEventListener('touchstart', startMusicOnFirstInteraction);
    }
    document.body.addEventListener('click', startMusicOnFirstInteraction);
    document.body.addEventListener('touchstart', startMusicOnFirstInteraction);


    // --- Lógica del Reproductor ---
    function formatTime(seconds) {
        const minutes = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${minutes}:${secs < 10 ? '0' : ''}${secs}`;
    }

    // Muestra la duración total cuando la canción ha cargado sus metadatos
    audioPlayer.addEventListener('loadedmetadata', () => {
        durationTimeEl.textContent = formatTime(audioPlayer.duration);
    });

    playPauseButton.addEventListener('click', () => {
        if (audioPlayer.paused) {
            audioPlayer.play();
        } else {
            audioPlayer.pause();
        }
    });
    
    audioPlayer.addEventListener('play', () => {
        playIcon.classList.add('hidden');
        pauseIcon.classList.remove('hidden');
    });

    audioPlayer.addEventListener('pause', () => {
        pauseIcon.classList.add('hidden');
        playIcon.classList.remove('hidden');
    });

    audioPlayer.addEventListener('timeupdate', () => {
        const progress = (audioPlayer.currentTime / audioPlayer.duration) * 100;
        seekSlider.value = progress || 0; // Evita que sea NaN si la duración es 0
        currentTimeEl.textContent = formatTime(audioPlayer.currentTime);
    });

    seekSlider.addEventListener('input', () => {
        const newTime = (seekSlider.value / 100) * audioPlayer.duration;
        audioPlayer.currentTime = newTime;
    });

</script>

<!-- 5. Estilos adicionales para la barra de progreso (input range) -->
<style is:global>
    #music-player-container{
        z-index: 9999;
    }
    #player-controls{
        background: #BBA15D;
    }
    #play-icon, #pause-icon{
        color: #BBA15D;
    }
    #play-pause-button{
        background: #EFEFEF;
    }
    #play-pause-button:hover{
        cursor: pointer;
    }
    #current-time, #duration-time{
        color: #EFEFEF;
    }
    input[type="range"] {
        -webkit-appearance: none;
        appearance: none;
        background: transparent;
        cursor: pointer;
        width: 100%;
    }
    /* Estilos de la Pista (Track) */
    input[type="range"]::-webkit-slider-runnable-track {
        background: rgba(0, 0, 0, 0.2);
        height: 4px;
        border-radius: 2px;
    }
    input[type="range"]::-moz-range-track {
        background: rgba(0, 0, 0, 0.2);
        height: 4px;
        border-radius: 2px;
    }
    /* Estilos del Pulgar (Thumb) */
    input[type="range"]::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        margin-top: -6px;
        background-color: #EFEFEF; /* Usando tu color 'gold' */
        height: 16px;
        width: 16px;
        border-radius: 50%;
    }
    input[type="range"]::-moz-range-thumb {
        border: none;
        background-color: #EFEFEF;
        height: 16px;
        width: 16px;
        border-radius: 50%;
    }
</style>